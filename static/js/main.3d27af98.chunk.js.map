{"version":3,"sources":["components/Navbar/Navbar.js","components/Card/Card.js","App.js","index.js"],"names":["Navbar","props","console","log","color","gameOver","className","href","style","background","headline","score","topscore","Card","data-id","id","backgroundImage","image","onClick","e","onclick","App","state","clicked","randomDeck","deck","i","card","push","sort","a","b","Math","random","handleClick","target","getAttribute","includes","setState","newGame","cards","this","classes","map","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAoBeA,MAlBf,YAA6B,IAATC,EAAQ,oBAACC,QAAQC,IAAIF,GACrC,IAAMG,EAAQH,EAAMI,SAAW,OAAS,QACxC,OACI,qBAAKC,UAAU,SAAf,SACI,+BACI,oBAAIA,UAAU,QAAd,SACI,mBAAGC,KAAK,IAAR,2BAEJ,oBAAIC,MAAO,CAACJ,MAAM,GAAD,OAAKA,GAASK,WAAY,mBAA3C,SACKR,EAAMS,WAEX,yCACYT,EAAMU,MADlB,iBACuCV,EAAMW,kBCN9CC,MANf,YAA2B,IAATZ,EAAQ,oBACtB,OACK,yBAASK,UAAU,aAAaQ,UAASb,EAAMc,GAAIP,MAAO,CAAEQ,gBAAgB,OAAD,OAASf,EAAMgB,MAAf,MAA2BC,QAAS,SAACC,GAAD,OAAOlB,EAAMmB,QAAQD,OCoE9HE,G,kNAlEbC,MAAQ,CACNX,MAAO,EACPC,SAAU,EACVW,QAAS,GACTb,SAAU,2BACVL,UAAU,G,EAGZmB,WAAa,WAEX,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMC,EAAOD,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,GACnCD,EAAKG,KAAK,CAACb,GAAG,GAAD,OAAKW,GAAIT,MAAM,eAAD,OAAiBU,EAAjB,UAE7B,OAAOF,EAAKI,MAAK,SAACC,EAAGC,GACnB,MAAO,GAAMC,KAAKC,a,EAItBC,YAAc,SAACf,GACb,MAA6C,EAAKG,MAA5CC,EAAN,EAAMA,QAASZ,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,SACtB,IADA,EAAgCP,SACjB,CACb,IAAMU,EAAKI,EAAEgB,OAAOC,aAAa,WAC5Bb,EAAQc,SAAStB,IAOpBH,EAAWD,EAAQC,EAAWD,EAAQC,EACtC,EAAK0B,SAAS,CAACf,UAASZ,QAAOC,WAAUF,SAAU,gCAAiCL,UAAU,MAP9FkB,EAAQK,KAAKb,GAEbH,IADAD,EACmBC,EAAWD,EAAQC,EACtC,EAAK0B,SAAS,CAACf,UAASZ,QAAOC,WAAUF,SAAU,wC,EASzD6B,QAAU,WACR,EAAKD,SAAS,CACZ3B,MAAO,EACPY,QAAS,GACTb,SAAU,2BACVL,UAAU,K,4CAId,WAAU,IAAD,OACHmC,EAAQC,KAAKjB,aACnB,EAAgDiB,KAAKnB,MAA7CZ,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,SAAUP,EAAnC,EAAmCA,SAC7BqC,EAAUrC,EAAW,gBAAkB,gBAC5C,OACC,gCACC,cAAC,EAAD,CAAQM,MAAOA,EAAOC,SAAUA,EAAUF,SAAUA,EAAUL,SAAUA,IACrE,uBAAMC,UAAU,YAAhB,UAEIkC,EAAMG,KAAI,SAAAhB,GAAI,OAAI,cAAC,EAAD,CAAMV,MAAOU,EAAKV,MAAOF,GAAIY,EAAKZ,GAAIK,QAAS,SAACD,GAAO,EAAKe,YAAYf,KAAUQ,EAAKZ,OAE3G,sBAAKT,UAAWoC,EAAhB,UACE,2CACA,wBAAQxB,QAAS,WAAO,EAAKqB,WAA7B,sC,GA3DMK,IAAMC,YCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3d27af98.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar({...props}) {console.log(props);\n    const color = props.gameOver ? '#900' : 'green';\n    return (\n        <nav className=\"navbar\">\n            <ul>\n                <li className=\"brand\">\n                    <a href=\"/\">Clicky Game</a>\n                </li>\n                <li style={{color: `${color}`, background: 'rgba(0,0,0,0.4)'}}>\n                    {props.headline}\n                </li>\n                <li>\n                    Score: {props.score} | Top Score: {props.topscore}\n                </li>\n            </ul>\n        </nav>\n    );\n}\nexport default Navbar;\n","import React from \"react\";\n\nfunction Card({...props}) {\n    return (\n         <picture className=\"click-item\" data-id={props.id} style={{ backgroundImage: `url(${props.image})` }} onClick={(e) => props.onclick(e)}/>\n    );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    topscore: 0,\n    clicked: [],\n    headline: 'Click an image to begin!',\n    gameOver: false\n  };\n\n  randomDeck = () => {\n    const deck = [];\n    for (let i = 1; i < 13; i++) {\n      const card = i < 10 ? `0${i}` : `${i}`\n      deck.push({id: `${i}`,image: `images/card_${card}.png`});\n    }\n    return deck.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  }\n\n  handleClick = (e) => {\n    let { clicked, score, topscore, gameOver } = this.state;\n    if (!gameOver) {\n      const id = e.target.getAttribute('data-id');\n      if (!clicked.includes(id)) {\n        clicked.push(id);\n        score++;\n        topscore = score > topscore ? score : topscore;\n        this.setState({clicked, score, topscore, headline: 'Nice! Now select another unique.'});\n      }\n      else {\n        topscore = score > topscore ? score : topscore;\n        this.setState({clicked, score, topscore, headline: 'You selected that one before.', gameOver: true});\n      }\n    }\n  };\n\n  newGame = () => {\n    this.setState({\n      score: 0,\n      clicked: [],\n      headline: 'Click an image to begin!',\n      gameOver: false\n    });\n  }\n\n  render() {\n  const cards = this.randomDeck();\n  const { headline, score, topscore, gameOver } = this.state;\n  const classes = gameOver ? 'gameOver show' : 'gameOver hide';\n  \treturn (\n  \t\t<div>\n  \t\t\t<Navbar score={score} topscore={topscore} headline={headline} gameOver={gameOver} />\n        <main className=\"container\">\n          {\n            cards.map(card => <Card image={card.image} id={card.id} onclick={(e) => {this.handleClick(e)}} key={card.id} />)\n          }\n          <div className={classes}>\n            <h1>Game Over</h1>\n            <button onClick={() => {this.newGame()}}>Play Again?</button>\n          </div>\n        </main>\n  \t\t</div>\n  \t);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}